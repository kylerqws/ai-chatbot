package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"sync"
)

const (
	vkConfirmationCode = "–í–ê–®_–ö–û–î_–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø" // –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è VK Callback API
	vkToken            = "–í–ê–®_–¢–û–ö–ï–ù_–î–û–°–¢–£–ü–ê"     // –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API
	openaiAPIKey       = "–í–ê–®_API_–ö–õ–Æ–ß_CHATGPT"   // API-–∫–ª—é—á OpenAI
)

var (
	wg sync.WaitGroup // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
)

// VKMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç VK
type VKMessage struct {
	Type    string `json:"type"`
	GroupID int    `json:"group_id"`
	Object  struct {
		Message struct {
			FromID int    `json:"from_id"`
			Text   string `json:"text"`
		} `json:"message"`
	} `json:"object"`
}

// ChatGPTRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT API
type ChatGPTRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
	Model     string `json:"model"`
}

// ChatGPTResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT API
type ChatGPTResponse struct {
	Choices []struct {
		Text string `json:"text"`
	} `json:"choices"`
}

// sendToVK –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ VK API
func sendToVK(userID int, message string) {
	url := "https://api.vk.com/method/messages.send"
	params := map[string]interface{}{
		"user_id":   userID,
		"random_id": 0,
		"message":   message,
		"access_token": vkToken,
		"v":         "5.131",
	}

	body, err := json.Marshal(params)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ VK: %v", err)
		return
	}

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(body))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è VK: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Printf("VK API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", resp.Status)
	}
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–≥–æ –≤ ChatGPT
func processMessage(userID int, text string) {
	defer wg.Done()

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT
	requestBody := ChatGPTRequest{
		Prompt:    text,
		MaxTokens: 100,
		Model:     "text-davinci-003",
	}

	body, err := json.Marshal(requestBody)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT: %v", err)
		return
	}

	req, err := http.NewRequest("POST", "https://api.openai.com/v1/completions", bytes.NewBuffer(body))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT: %v", err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+openaiAPIKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Printf("ChatGPT API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", resp.Status)
		return
	}

	var chatGPTResponse ChatGPTResponse
	if err := json.NewDecoder(resp.Body).Decode(&chatGPTResponse); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ChatGPT: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ VK
	if len(chatGPTResponse.Choices) > 0 {
		sendToVK(userID, chatGPTResponse.Choices[0].Text)
	} else {
		sendToVK(userID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòî")
	}
}

// handler –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
func handler(w http.ResponseWriter, r *http.Request) {
	var message VKMessage

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
	if err := json.NewDecoder(r.Body).Decode(&message); err != nil {
		http.Error(w, "Bad request", http.StatusBadRequest)
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
	if message.Type == "confirmation" {
		fmt.Fprint(w, vkConfirmationCode)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.Type == "message_new" {
		userID := message.Object.Message.FromID
		text := message.Object.Message.Text

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, text)

		wg.Add(1)
		go processMessage(userID, text)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç "ok"
	fmt.Fprint(w, "ok")
}

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "5000"
	}

	http.HandleFunc("/", handler)

	log.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
