package chatrole

import (
	"fmt"
	"strings"
)

type ChatRole struct {
	Code        string
	Description string
}

const (
	SystemCode    = "system"
	UserCode      = "user"
	AssistantCode = "assistant"
	ToolCode      = "tool"
)

var (
	System = &ChatRole{
		Code:        SystemCode,
		Description: "Provides initial instructions or context to the assistant.",
	}
	User = &ChatRole{
		Code:        UserCode,
		Description: "Represents the user input in a conversation.",
	}
	Assistant = &ChatRole{
		Code:        AssistantCode,
		Description: "Represents responses generated by the assistant.",
	}
	Tool = &ChatRole{
		Code:        ToolCode,
		Description: "Represents messages generated by tool function calls.",
	}
)

var AllChatRoles = map[string]*ChatRole{
	SystemCode:    System,
	UserCode:      User,
	AssistantCode: Assistant,
	ToolCode:      Tool,
}

func Resolve(code string) (*ChatRole, error) {
	if role, ok := AllChatRoles[code]; ok {
		return role, nil
	}

	return nil, fmt.Errorf("unknown value '%v'", code)
}

func JoinCodes(sep string) string {
	codes := make([]string, 0, len(AllChatRoles))
	for code := range AllChatRoles {
		codes = append(codes, code)
	}

	return strings.Join(codes, sep)
}
